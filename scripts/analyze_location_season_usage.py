#!/usr/bin/env python3
"""
Analyze how location and season data is used throughout the system
"""

import json
import re
from pathlib import Path

def analyze_location_season_usage():
    """Analyze how location and season data is used in the system"""
    print("üîç Location and Season Data Usage Analysis")
    print("=" * 60)
    
    # Check prediction validation log for location/season usage
    print("üìä PREDICTION VALIDATION LOG ANALYSIS:")
    print("-" * 40)
    
    try:
        with open('prediction_validation_log.json', 'r') as f:
            prediction_logs = json.load(f)
        
        print(f"üìà Total prediction entries: {len(prediction_logs)}")
        
        # Analyze location/season usage in logs
        location_usage = {}
        season_usage = {}
        climate_zone_usage = {}
        
        for entry in prediction_logs[:100]:  # Sample first 100 entries
            # Check input_telemetry
            if 'input_telemetry' in entry:
                telemetry = entry['input_telemetry']
                
                # Location usage
                if 'location' in telemetry:
                    location = telemetry['location']
                    location_usage[location] = location_usage.get(location, 0) + 1
                
                # Season usage
                if 'season' in telemetry:
                    season = telemetry['season']
                    season_usage[season] = season_usage.get(season, 0) + 1
                
                # Climate zone usage
                if 'climate_zone' in telemetry:
                    climate_zone = telemetry['climate_zone']
                    climate_zone_usage[climate_zone] = climate_zone_usage.get(climate_zone, 0) + 1
        
        print(f"üåç Location Usage:")
        for location, count in sorted(location_usage.items()):
            print(f"   ‚Ä¢ {location}: {count} entries")
        
        print(f"üå¶Ô∏è Season Usage:")
        for season, count in sorted(season_usage.items()):
            print(f"   ‚Ä¢ {season}: {count} entries")
        
        print(f"üå°Ô∏è Climate Zone Usage:")
        for climate_zone, count in sorted(climate_zone_usage.items()):
            print(f"   ‚Ä¢ {climate_zone}: {count} entries")
        
    except Exception as e:
        print(f"‚ùå Error analyzing prediction logs: {e}")
    
    print()
    
    # Analyze dashboard code for location/season usage
    print("üìä DASHBOARD CODE ANALYSIS:")
    print("-" * 40)
    
    try:
        with open('dashboard/app.py', 'r') as f:
            dashboard_code = f.read()
        
        # Find location/season usage patterns
        location_patterns = [
            r'climate_zone',
            r'season',
            r'location',
            r'get_adaptive_safety_thresholds',
            r'calculate_bhi',
            r'apply_climate_aware_adjustments',
            r'get_bhi_recommendations',
            r'get_fallback_action'
        ]
        
        print("üîç Location/Season Usage in Dashboard:")
        for pattern in location_patterns:
            matches = re.findall(pattern, dashboard_code)
            if matches:
                print(f"   ‚Ä¢ {pattern}: {len(matches)} occurrences")
        
        # Find specific usage examples
        print("\nüìã Specific Usage Examples:")
        
        # Climate zone usage
        climate_zone_examples = re.findall(r'climate_zone.*?=.*?["\'].*?["\']', dashboard_code)
        if climate_zone_examples:
            print(f"   ‚Ä¢ Climate zone assignments: {len(climate_zone_examples)}")
        
        # Season usage
        season_examples = re.findall(r'season.*?=.*?["\'].*?["\']', dashboard_code)
        if season_examples:
            print(f"   ‚Ä¢ Season assignments: {len(season_examples)}")
        
        # Adaptive thresholds usage
        adaptive_examples = re.findall(r'get_adaptive_safety_thresholds.*?\(', dashboard_code)
        if adaptive_examples:
            print(f"   ‚Ä¢ Adaptive thresholds calls: {len(adaptive_examples)}")
        
        # BHI calculation usage
        bhi_examples = re.findall(r'calculate_bhi.*?\(', dashboard_code)
        if bhi_examples:
            print(f"   ‚Ä¢ BHI calculation calls: {len(bhi_examples)}")
        
    except Exception as e:
        print(f"‚ùå Error analyzing dashboard code: {e}")
    
    print()
    
    # Analyze how location/season affects system behavior
    print("üìä SYSTEM BEHAVIOR ANALYSIS:")
    print("-" * 40)
    
    print("1Ô∏è‚É£ ADAPTIVE SAFETY THRESHOLDS:")
    print("   ‚Ä¢ Location affects temperature thresholds")
    print("   ‚Ä¢ Season affects sensitivity adjustments")
    print("   ‚Ä¢ Climate zone determines base thresholds")
    print("   ‚Ä¢ Charging mode affects threshold adjustments")
    print()
    
    print("2Ô∏è‚É£ BATTERY HEALTH INDEX (BHI):")
    print("   ‚Ä¢ Climate zone factor (10% weight)")
    print("   ‚Ä¢ Season factor (3% weight)")
    print("   ‚Ä¢ Environmental health (25% weight)")
    print("   ‚Ä¢ Charging health (2% weight)")
    print()
    
    print("3Ô∏è‚É£ RL AGENT ADJUSTMENTS:")
    print("   ‚Ä¢ 20 climate/season combinations")
    print("   ‚Ä¢ If-else logic for action adjustments")
    print("   ‚Ä¢ Safety overrides for critical conditions")
    print("   ‚Ä¢ Confidence boosts for climate-aware actions")
    print()
    
    print("4Ô∏è‚É£ RECOMMENDATIONS:")
    print("   ‚Ä¢ Climate-specific charging advice")
    print("   ‚Ä¢ Season-specific safety recommendations")
    print("   ‚Ä¢ Location-specific environmental factors")
    print("   ‚Ä¢ Adaptive threshold explanations")
    print()
    
    print("5Ô∏è‚É£ LOGGING AND ANALYSIS:")
    print("   ‚Ä¢ Climate context in prediction logs")
    print("   ‚Ä¢ Location/season in telemetry data")
    print("   ‚Ä¢ Adaptive thresholds tracking")
    print("   ‚Ä¢ BHI calculations with climate factors")
    print()

def explain_location_season_benefits():
    """Explain the benefits of location and season data"""
    print("üéØ LOCATION AND SEASON DATA BENEFITS:")
    print("=" * 60)
    
    print("1Ô∏è‚É£ ADAPTIVE SAFETY THRESHOLDS:")
    print("-" * 40)
    print("üå°Ô∏è Temperature Thresholds:")
    print("   ‚Ä¢ Hot Desert: 35¬∞C (more sensitive)")
    print("   ‚Ä¢ Tropical Monsoon: 37¬∞C (more sensitive)")
    print("   ‚Ä¢ Subtropical Highland: 44¬∞C (less sensitive)")
    print("   ‚Üí Prevents thermal runaway in extreme climates")
    print()
    
    print("üå¶Ô∏è Season Adjustments:")
    print("   ‚Ä¢ Summer: -2.5¬∞C threshold (more sensitive)")
    print("   ‚Ä¢ Monsoon: -1.5¬∞C threshold (more sensitive)")
    print("   ‚Ä¢ Winter: +2.0¬∞C threshold (less sensitive)")
    print("   ‚Üí Adapts to seasonal temperature variations")
    print()
    
    print("2Ô∏è‚É£ ENHANCED BATTERY HEALTH INDEX:")
    print("-" * 40)
    print("üîã Climate Zone Health (10% weight):")
    print("   ‚Ä¢ Hot Desert: 0.80-0.85 (reduced in extreme heat)")
    print("   ‚Ä¢ Tropical Monsoon: 0.85-0.90 (reduced in humidity)")
    print("   ‚Ä¢ Subtropical Highland: 0.90-0.95 (good conditions)")
    print("   ‚Üí Reflects climate impact on battery health")
    print()
    
    print("üå¶Ô∏è Season Health (3% weight):")
    print("   ‚Ä¢ Summer: 0.80-0.90 (reduced in extreme heat)")
    print("   ‚Ä¢ Monsoon: 0.85-0.90 (reduced in humidity)")
    print("   ‚Ä¢ Winter: 0.88-0.95 (good in moderate cold)")
    print("   ‚Ä¢ Spring: 1.00 (optimal conditions)")
    print("   ‚Üí Accounts for seasonal variations")
    print()
    
    print("3Ô∏è‚É£ RL AGENT CLIMATE-AWARE ACTIONS:")
    print("-" * 40)
    print("üåç Climate Zone + Season Combinations (20 total):")
    print("   ‚Ä¢ Hot Desert + Summer: Fast charge ‚Üí Pause (extreme heat)")
    print("   ‚Ä¢ Tropical Monsoon + Monsoon: Fast charge ‚Üí Slow charge (humidity)")
    print("   ‚Ä¢ Subtropical Highland + Winter: Pause ‚Üí Slow charge (cold)")
    print("   ‚Üí Prevents dangerous actions in extreme conditions")
    print()
    
    print("4Ô∏è‚É£ REAL-WORLD SAFETY BENEFITS:")
    print("-" * 40)
    print("üö® Prevents Thermal Runaway:")
    print("   ‚Ä¢ Desert conditions: More sensitive temperature monitoring")
    print("   ‚Ä¢ Monsoon conditions: Humidity-aware charging")
    print("   ‚Ä¢ Highland conditions: Cold weather protection")
    print()
    
    print("üîã Optimizes Charging Strategy:")
    print("   ‚Ä¢ Summer: Reduces charging speed in extreme heat")
    print("   ‚Ä¢ Winter: Ensures charging in cold conditions")
    print("   ‚Ä¢ Monsoon: Protects against humidity damage")
    print()
    
    print("üìä Provides Context-Aware Recommendations:")
    print("   ‚Ä¢ Climate-specific advice")
    print("   ‚Ä¢ Season-specific warnings")
    print("   ‚Ä¢ Location-specific environmental factors")
    print("   ‚Ä¢ Adaptive threshold explanations")
    print()
    
    print("5Ô∏è‚É£ SYSTEM INTELLIGENCE:")
    print("-" * 40)
    print("üß† Context-Aware Decision Making:")
    print("   ‚Ä¢ Same battery state ‚Üí Different actions based on climate")
    print("   ‚Ä¢ Same temperature ‚Üí Different thresholds based on location")
    print("   ‚Ä¢ Same SoC ‚Üí Different recommendations based on season")
    print()
    
    print("üìà Continuous Learning:")
    print("   ‚Ä¢ Logs climate context for analysis")
    print("   ‚Ä¢ Tracks adaptive threshold effectiveness")
    print("   ‚Ä¢ Monitors BHI trends by climate zone")
    print("   ‚Ä¢ Improves recommendations over time")
    print()
    
    print("üéØ SUMMARY:")
    print("Location and season data makes the system:")
    print("   ‚úÖ More intelligent (context-aware decisions)")
    print("   ‚úÖ More safe (adaptive thresholds)")
    print("   ‚úÖ More accurate (climate-specific BHI)")
    print("   ‚úÖ More practical (real-world conditions)")
    print("   ‚úÖ More robust (handles diverse environments)")

def main():
    """Main analysis function"""
    analyze_location_season_usage()
    explain_location_season_benefits()
    
    print("\n‚úÖ Location and season usage analysis complete!")
    print("üéØ The system uses location/season data for intelligent, adaptive safety!")

if __name__ == "__main__":
    main()


